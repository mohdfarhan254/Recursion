/*
ðŸ”¹ Summary of How Inclusion & Exclusion Work in the for Loop Approach
Each recursive call adds an element (arr[i]) and explores all its combinations.
When backtracking happens, the loop moves forward (i+1), ensuring exclusion of the previous element.
Unlike a binary tree, this recursion tree is irregular because:
Each node has a different number of children based on the for loop range.
Some branches terminate early due to pruning (if (arr[i] > sum) break;).
Duplicates are skipped (if (i > idx && arr[i] == arr[i-1]) continue;).
The recursion does not have a balanced structure 
since each recursive call progresses differently based on the remaining sum and loop index.
Each recursive call starts fresh from i+1,
naturally preventing previously chosen elements from appearing again.
ðŸ’¡ Key Takeaway: The for loop inherently ensures inclusion
(by picking arr[i] and recursing) and exclusion (by moving to i+1 after backtracking
*/


/*
ðŸ“Œ Understanding the Question: Combination Sum
ðŸ‘‰ Problem Statement:
You are given an array of distinct integers (candidates[]) and a target value (target). You need to find all unique combinations in the array where the numbers sum up to target.

ðŸ“Œ Rules:
âœ” You can use the same number multiple times (unlimited frequency).
âœ” The order of numbers in the combination doesn't matter (set-based, not sequence-based).
âœ” No duplicate combinations should be included in the output.
 */
     
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(candidates);
    backtrack(list, new ArrayList<>(), candidates, target, 0);
    return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int remain, int start){
    if(remain < 0) return;
    // We are storing a reference to tempList, not a new copy.
    // Since tempList is modified in further recursion calls,
    // all stored results will be modified.
    else if(remain == 0) list.add(new ArrayList<>(tempList));
    else{ 
        for(int i = start; i < nums.length; i++){
            if(nums[i] > remain)// ðŸ”¹ Prune: Stop if current number exceeds target sum
              break;
              
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, remain - nums[i], i); // not i + 1 because we can reuse same elements
            tempList.remove(tempList.size() - 1);
        }
    }
}
}
    
