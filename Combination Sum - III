class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        /*
         * Approach:
         * - We use backtracking to find all unique combinations of `k` numbers
         *   that sum up to `n`, choosing from 1 to 9.
         * - Each number can only be used once.
         * - We maintain a temporary list to store current combinations.
         * - Base case: If the size of the list reaches `k`, we check if sum is `n`.
         * - Pruning: If target sum becomes negative, we stop early.
         */

        List<List<Integer>> result = new ArrayList<>();
        backtrack(k, n, result, new ArrayList<>(), 1);
        return result;
    }

    void backtrack(int k, int target, List<List<Integer>> result, List<Integer> temp, int start) {
        // ✅ Base Case: If `k` elements are chosen, check if sum matches
        if (temp.size() == k) {
            if (target == 0) {
                result.add(new ArrayList<>(temp)); // Store valid combination
            }
            return;
        }

        // 🔄 Iterate through numbers 1-9, ensuring no duplicates
        for (int i = start; i <= 9; i++) {
            if (target < i) break; // ⚡ Pruning: Stop if remaining sum is too small

            // 🔹 Pick current number
            temp.add(i);

            // 🔁 Recursive Call: Explore remaining numbers with updated sum
            backtrack(k, target - i, result, temp, i + 1);

            // 🔙 Backtrack: Remove last element before next iteration
            temp.remove(temp.size() - 1);
        }
    }
}
